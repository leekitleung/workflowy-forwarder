// ==UserScript==
// @name         WorkFlowy Node Collector
// @namespace    http://tampermonkey.net/
// @version      0.2
// @description  Collect and copy WorkFlowy nodes with smart comparison and improved performance and error handling
// @author       You
// @match        https://workflowy.com/*
// @match        https://beta.workflowy.com/*
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    const API_KEY = 'fbe40bfde42d3fd3dbdd518871f3576a9cc9a48e';

    // 添加样式
    GM_addStyle(`
        .node-collector {
            position: fixed;
            right: -320px; /* 初始隐藏 */
            top: 60px;
            width: 300px;
            max-height: 80vh;
            overflow-y: auto;
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            z-index: 1000;
            transition: right 0.3s ease;
        }

        .node-collector.active {
            right: 20px;
        }

        .node-card {
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #eee;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .node-card:hover {
            background: #f5f5f5;
        }

        .node-card.completed {
            background: #e8f5e9;
            opacity: 0.7;
        }

        .node-content {
            margin-bottom: 5px;
        }

        .node-children {
            margin-left: 15px;
            font-size: 0.9em;
            color: #666;
        }

        #collector-toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: #333;
            color: white;
            padding: 10px;
            border-radius: 4px;
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 1001;
        }

        #collector-toast.show {
            opacity: 1;
        }

        #collector-toast.error {
            background: #e74c3c;
        }

        #collector-toast.success {
            background: #2ecc71;
        }
    `));

    class NodeCollector {
        constructor() {
            this.panel = null;
            this.nodes = new Map();
            this.isActive = false;
            this.createPanel();
            this.setupShortcut();
            this.initPanelState();
        }

        createPanel() {
            this.panel = document.createElement('div');
            this.panel.className = 'node-collector';
            this.panel.innerHTML = '<h3>Node Collector</h3>';
            document.body.appendChild(this.panel);
        }

        togglePanel(force) {
            this.isActive = force !== undefined ? force : !this.isActive;
            this.panel.classList.toggle('active', this.isActive);
            localStorage.setItem('nodeCollectorState', this.isActive ? 'active' : 'inactive');
            this.showToast(`面板已${this.isActive ? '打开' : '关闭'}`, 'success');
        }

        setupShortcut() {
            document.addEventListener('keydown', (e) => {
                if (e.ctrlKey && e.key === '/') {
                    this.togglePanel();
                }
            });
        }

        initPanelState() {
            const savedState = localStorage.getItem('nodeCollectorState');
            if (savedState === 'active') {
                this.togglePanel(true);
            }
        }

        showToast(message, type) {
            let toast = document.getElementById('collector-toast');
            if (!toast) {
                toast = document.createElement('div');
                toast.id = 'collector-toast';
                document.body.appendChild(toast);
            }
            toast.textContent = message;
            toast.className = `show ${type}`;
            setTimeout(() => toast.classList.remove('show'), 2000);
        }

        async collectNode(nodeId) {
            try {
                if (this.nodes.has(nodeId)) {
                    return;
                }

                if (this.nodes.size > 50) {
                    const oldestNode = this.nodes.keys().next().value;
                    this.removeNode(oldestNode);
                }

                const response = await fetch(`https://beta.workflowy.com/api/nodes/${nodeId}`, {
                    headers: {
                        'Authorization': `Bearer ${API_KEY}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error(`API request failed: ${response.status}`);
                }

                const data = await response.json();
                this.processNode(data);
            } catch (error) {
                console.error('Error collecting node:', error);
                this.showToast('节点收集失败', 'error');
            }
        }

        processNode(nodeData) {
            const parent = nodeData;
            const children = nodeData.children || [];
            const firstChild = children[0];

            let contentToCopy = '';
            let isCompleted = parent.name.includes('[DONE]');

            if (firstChild && parent.name === firstChild.name) {
                contentToCopy = `${parent.name}\n`;
                children.slice(1).forEach(child => {
                    contentToCopy += `- ${child.name}\n`;
                    if (child.url) contentToCopy += `  ${child.url}\n`;
                });
            } else {
                contentToCopy = `${parent.name}\n`;
                children.forEach(child => {
                    contentToCopy += `- ${child.name}\n`;
                    if (child.url) contentToCopy += `  ${child.url}\n`;
                });
            }

            this.createNodeCard(nodeData.id, contentToCopy, isCompleted);
        }

        createNodeCard(nodeId, content, isCompleted) {
            const card = document.createElement('div');
            card.className = `node-card ${isCompleted ? 'completed' : ''}`;
            card.innerHTML = `
                <div class="node-content">${content.split('\n').join('<br>')}</div>
            `;

            card.addEventListener('click', async () => {
                await navigator.clipboard.writeText(content);
                card.classList.add('completed');
                this.markNodeAsCompleted(nodeId);
                this.showToast('内容已复制', 'success');
            });

            this.panel.appendChild(card);
            this.nodes.set(nodeId, card);
        }

        async markNodeAsCompleted(nodeId) {
            try {
                const response = await fetch(`https://beta.workflowy.com/api/nodes/${nodeId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        name: `[DONE] ${WF.getItemById(nodeId).getNameInPlainText()}`
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to update node status');
                }
            } catch (error) {
                console.error('Error marking node as completed:', error);
                this.showToast('更新节点状态失败', 'error');
            }
        }

        removeNode(nodeId) {
            const card = this.nodes.get(nodeId);
            if (card) {
                card.remove();
                this.nodes.delete(nodeId);
            }
        }
    }

    async function init() {
        try {
            await waitForWF();
            console.log('WorkFlowy API 加载完成');
            const collector = new NodeCollector();
            initObserver(collector);
        } catch (error) {
            console.error('初始化失败:', error);
            setTimeout(init, 1000);
        }
    }

    function waitForWF() {
        return new Promise((resolve) => {
            const check = () => {
                if (typeof WF !== 'undefined' && WF.currentItem()) {
                    setTimeout(resolve, 1000);
                } else {
                    setTimeout(check, 100);
                }
            };
            check();
        });
    }

    function initObserver(collector) {
        let timeout;
        const observer = new MutationObserver(() => {
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                try {
                    const match = location.href.match(/workflowy\.com\/#\/.*?\/([^\/]+)/);
                    if (match) {
                        const nodeId = match[1];
                        collector.collectNode(nodeId);
                    }
                } catch (error) {
                    console.error('URL 处理错误:', error);
                }
            }, 300);
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });

        window.addEventListener('unload', () => {
            observer.disconnect();
        });
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
})();