// ==UserScript==
// @name         WorkFlowy Node Collector with Color (Enhanced)
// @namespace    http://tampermonkey.net/
// @version      0.3
// @description  Collect nodes and display them as colored cards with proper color support
// @author       You
// @match        https://workflowy.com/*
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    const TARGET_NODE_ID = 'dfd2b14ce43b';
    let isInitialized = false;
    GM_addStyle(`
        .collector-panel {
            position: fixed;
            right: 20px;
            top: 60px;
            background: #2B3135;
            padding: 15px;
            border-radius: 8px;
            color: white;
            z-index: 9999;
            width: 350px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            max-height: 80vh;
            display: flex;
            flex-direction: column;
        }

        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            flex-shrink: 0;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .panel-title {
            margin: 0;
            font-size: 16px;
            font-weight: 500;
        }

        .close-button {
            background: none;
            border: none;
            color: #ffffff80;
            cursor: pointer;
            font-size: 20px;
            padding: 0;
            line-height: 1;
            transition: color 0.2s ease;
        }

        .close-button:hover {
            color: #fff;
        }

        .cards-container {
            overflow-y: auto;
            flex-grow: 1;
            padding-right: 5px;
        }

        .node-card {
            padding: 12px;
            margin-bottom: 8px;
            border-radius: 6px;
            background: rgba(53, 60, 63, 1);
            border: 1px solid rgba(58, 67, 71, 1);
            transition: all 0.3s ease;
            font-size: 14px;
            cursor: pointer;
            line-height: 1.4;
            position: relative;
        }

        .node-card.colored {
            background: var(--node-color, rgba(53, 60, 63, 1));
            border: 1px solid var(--node-border-color, rgba(58, 67, 71, 1));
            color: var(--text-color, inherit);
        }

        .node-card.highlighted {
            background: var(--highlight-color, rgba(53, 60, 63, 1));
            border: 1px solid var(--highlight-border-color, rgba(58, 67, 71, 1));
        }

        .node-card:hover {
            transform: translateX(-3px);
            opacity: 0.9;
            box-shadow: 2px 2px 6px rgba(0,0,0,0.2);
        }

        .refresh-button {
            background: #4a9eff;
            border: none;
            padding: 8px 16px;
            color: white;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
            width: 100%;
            transition: background-color 0.2s ease;
            font-size: 14px;
        }

        .refresh-button:hover {
            background: #357DA6;
        }

        .shortcut-info {
            font-size: 11px;
            color: #ffffff80;
            margin-top: 10px;
            text-align: center;
        }

        .cards-container::-webkit-scrollbar {
            width: 6px;
        }

        .cards-container::-webkit-scrollbar-track {
            background: #1a1d20;
            border-radius: 3px;
        }

        .cards-container::-webkit-scrollbar-thumb {
            background: #4a4d50;
            border-radius: 3px;
        }

        .cards-container::-webkit-scrollbar-thumb:hover {
            background: #5a5d60;
        }

        .empty-message {
            color: #ffffff80;
            text-align: center;
            padding: 20px;
            font-style: italic;
        }
    `);

    function getNodeColorInfo(node) {
        try {
            // 尝试从节点的完整内容中获取颜色信息
            const content = node.getName();
            if (!content) return null;
    
            // 使用正则表达式匹配颜色类
            const colorMatch = content.match(/class="colored ((?:c-|bc-)[a-z]+)"/);
            if (!colorMatch) return null;
    
            const colorClass = colorMatch[1];
            
            // 判断是文本颜色还是背景色
            if (colorClass.startsWith('bc-')) {
                return {
                    type: 'highlight',
                    colorClass: colorClass
                };
            } else if (colorClass.startsWith('c-')) {
                // 颜色映射表
                const textColorMap = {
                    'c-red': 'rgb(211, 47, 47)',
                    'c-orange': 'rgb(239, 108, 0)',
                    'c-yellow': 'rgb(249, 168, 37)',
                    'c-green': 'rgb(56, 142, 60)',
                    'c-blue': 'rgb(30, 136, 229)',
                    'c-purple': 'rgb(123, 31, 162)'
                };
    
                return {
                    type: 'colored',
                    colorClass: colorClass,
                    color: textColorMap[colorClass] || '#000000'
                };
            }
        } catch (error) {
            console.error('获取节点颜色信息失败:', error);
        }
        return null;
    }
    
    function createNodeCard(node) {
        try {
            const colorInfo = getNodeColorInfo(node);
            let colorStyle = '';
            let colorClass = '';
    
            if (colorInfo) {
                if (colorInfo.type === 'colored') {
                    colorClass = 'colored';
                    const colorMap = {
                        'c-red': 'rgba(211, 47, 47, 0.1)',
                        'c-orange': 'rgba(239, 108, 0, 0.1)',
                        'c-yellow': 'rgba(249, 168, 37, 0.1)',
                        'c-green': 'rgba(56, 142, 60, 0.1)',
                        'c-blue': 'rgba(30, 136, 229, 0.1)',
                        'c-purple': 'rgba(123, 31, 162, 0.1)'
                    };
    
                    const backgroundColor = colorMap[colorInfo.colorClass];
                    colorStyle = `
                        --node-color: ${backgroundColor}; 
                        --node-border-color: ${colorInfo.color.replace('rgb', 'rgba').replace(')', ', 0.3)')};
                        --text-color: ${colorInfo.color};
                    `;
                } else if (colorInfo.type === 'highlight') {
                    colorClass = 'highlighted';
                    const bgColorMap = {
                        'bc-red': 'rgba(211, 47, 47, 0.2)',
                        'bc-orange': 'rgba(239, 108, 0, 0.2)',
                        'bc-yellow': 'rgba(249, 168, 37, 0.2)',
                        'bc-green': 'rgba(56, 142, 60, 0.2)',
                        'bc-blue': 'rgba(30, 136, 229, 0.2)',
                        'bc-purple': 'rgba(123, 31, 162, 0.2)'
                    };
    
                    const backgroundColor = bgColorMap[colorInfo.colorClass];
                    colorStyle = `
                        --highlight-color: ${backgroundColor}; 
                        --highlight-border-color: ${backgroundColor.replace('0.2', '0.3')};
                    `;
                }
            }
    
            const div = document.createElement('div');
            div.className = `node-card ${colorClass}`;
            if (colorStyle) {
                div.style.cssText = colorStyle;
            }
            div.textContent = node.getNameInPlainText().replace(/\[c-.*?\]/g, ''); // 移除颜色标记
            div.setAttribute('data-id', node.getId());
    
            div.addEventListener('click', () => {
                WF.zoomTo(node);
            });
    
            return div;
        } catch (error) {
            console.error('创建节点卡片失败:', error);
            return null;
        }
    }

    function collectNodes() {
        try {
            const targetNode = WF.getItemById(TARGET_NODE_ID);
            if (!targetNode) {
                console.log('未找到目标节点');
                return [];
            }
            return targetNode.getChildren();
        } catch (error) {
            console.error('收集节点失败:', error);
            return [];
        }
    }

    function updatePanel() {
        try {
            const container = document.querySelector('.cards-container');
            if (!container) return;

            container.innerHTML = '';
            const nodes = collectNodes();

            if (!nodes || nodes.length === 0) {
                container.innerHTML = '<div class="empty-message">没有找到节点</div>';
                return;
            }

            nodes.forEach(node => {
                const card = createNodeCard(node);
                if (card) {
                    container.appendChild(card);
                }
            });
        } catch (error) {
            console.error('更新面板失败:', error);
        }
    }

    function togglePanel() {
        try {
            const panel = document.querySelector('.collector-panel');
            if (panel) {
                panel.remove();
            } else {
                initPanel();
            }
        } catch (error) {
            console.error('切换面板失败:', error);
        }
    }

    function initPanel() {
        try {
            const panel = document.createElement('div');
            panel.className = 'collector-panel';
            panel.innerHTML = `
                <div class="panel-header">
                    <h3 class="panel-title">节点收集器</h3>
                    <button class="close-button" id="close-panel">&times;</button>
                </div>
                <div class="cards-container"></div>
                <button class="refresh-button" id="refresh-nodes">刷新节点</button>
                <div class="shortcut-info">快捷键: Alt + C 切换面板</div>
            `;
            document.body.appendChild(panel);

            document.getElementById('refresh-nodes').addEventListener('click', updatePanel);
            document.getElementById('close-panel').addEventListener('click', togglePanel);

            updatePanel();
        } catch (error) {
            console.error('初始化面板失败:', error);
        }
    }

    function initializeScript() {
        if (isInitialized) return;
        
        try {
            if (typeof WF === 'undefined') {
                setTimeout(initializeScript, 1000);
                return;
            }

            document.addEventListener('keydown', function(e) {
                if (e.altKey && e.key === 'c') {
                    togglePanel();
                }
            });

            // 监听页面变化
            if (WF.currentPageChanged) {
                WF.currentPageChanged(() => {
                    const panel = document.querySelector('.collector-panel');
                    if (panel) {
                        updatePanel();
                    }
                });
            }

            isInitialized = true;
            console.log('WorkFlowy 节点收集器初始化成功');
        } catch (error) {
            console.error('初始化脚本失败:', error);
            setTimeout(initializeScript, 1000);
        }
    }

    // 启动脚本
    console.log('WorkFlowy 节点收集器启动...');
    initializeScript();
})();