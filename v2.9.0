

// ==UserScript==

// @name         WorkFlowy Reminder (Improved)

// @namespace    http://tampermonkey.net/

// @version      2.9.0

// @description  为WorkFlowy添加定时提醒功能（改进版）- 增加UI交互优化

// @author       Your name

// @match        https://workflowy.com/*

// @grant        GM_notification

// @grant        GM_addStyle

// ==/UserScript==

(function() {

    'use strict';

    GM_addStyle(`

    .reminder-panel {

        position: fixed;

        right: -319px;

        top: 46px; /* 与 WorkFlowy 头部对齐 */

        height: calc(100vh - 46px);

        width: 319px;

        background: #2B3135;

        border-left: 1px solid #5c6062;

        z-index: 100;

        display: flex;

        flex-direction: column;

        transition: transform 0.3s ease;

    }

    .panel-header {

        padding: 12px;

        flex-shrink: 0;

    }

    .panel-content {

        flex: 1;

        overflow-y: auto;

        padding: 0 12px;

    }

    .panel-content::-webkit-scrollbar {

        width: 8px;

    }

    .panel-content::-webkit-scrollbar-track {

        background: #353c3f;

    }

    .panel-content::-webkit-scrollbar-thumb {

        background: #636a6d;

        border-radius: 4px;

    }

    .reminder-panel.visible {

        transform: translateX(-319px);

    }

    /* 同时更新内容区域的宽度处理逻辑 */

    .reminder-panel.visible ~ #content {

        padding-right: 319px;

    }

    #content {

        transition: padding-right 0.3s ease;

    }

    #content.panel-visible {

        padding-right: 319px; /* 更新内容区域的 padding */

    }

    /* 快捷键提示样式 */

    #shortcut-toast {

        position: fixed;

        top: 20px;

        left: 50%;

        transform: translateX(-50%) translateY(-100%);

        background: rgba(0, 0, 0, 0.8);

        color: white;

        padding: 8px 16px;

        border-radius: 4px;

        font-size: 14px;

        opacity: 0;

        visibility: hidden;

        transition: all 0.3s ease;

        z-index: 10001;

        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;

    }

    #shortcut-toast.show {

        transform: translateX(-50%) translateY(0);

        opacity: 1;

        visibility: visible;

    }

    /* 更新切换按钮样式 */

    .reminder-toggle {

        position: fixed;

        right: 20px;

        top: 60px;

        background: #2B3135;

        border: none;

        padding: 8px;

        border-radius: 50%;

        cursor: pointer;

        z-index: 101;

        width: 32px;

        height: 32px;

        display: flex;

        align-items: center;

        justify-content: center;

        transition: all 0.3s ease;

    }

    .reminder-toggle:hover {

        background: #363b3f;

    }

    /* 箭头旋转 */

    .reminder-toggle.active .toggle-arrow {

        transform: rotate(180deg);

    }

    /* 保持快捷键提示 */

    .reminder-toggle::after {

        content: 'Alt + W';

        position: absolute;

        bottom: -20px;

        left: 50%;

        transform: translateX(-50%);

        font-size: 11px;

        color: #999;

        white-space: nowrap;

        opacity: 0;

        transition: opacity 0.2s ease;

        pointer-events: none;

    }

    .reminder-toggle:hover::after {

        opacity: 1;

    }

    /* 箭头图标样式 */

    .toggle-arrow {

        width: 16px;

        height: 16px;

        color: #e8e8e8;

        transition: transform 0.3s ease;

    }

    .mode-switch {

        display: flex;

        background: #2a3135;

        border-radius: 10px;

        padding: 6px;

        margin-bottom: 12px;

    }

    .mode-btn {

        flex: 1;

        padding: 6px 10px;

        border: none;

        background: transparent;

        color: #e8e8e8;

        cursor: pointer;

        border-radius: 4px;

        transition: all 0.3s;

        font-size: 14px;

        margin: 2px;

    }

    .mode-btn.active,.mode-btn:hover {

        background: #3A3F42;

        box-shadow: 0 2px 4px rgba(0,0,0,0.2);

    }

    .planner-link {

        display: block;

        color: #a8a8a8;

        font-size: 14px;

        text-decoration: none;

        padding: 8px;

        border-radius: 4px;

        margin-bottom: 20px;

        background: #2a3135;

        transition: all 0.3s;

    }

    .planner-link:hover {

        background: #33373A;

        color: #e8e8e8;

    }

    .reminder-block {

        margin-bottom: 16px;

        position: relative;

        z-index: 1;

    }

    .reminder-block-title {

        color: #d9dbdb;

        font-size: 14px;

        margin-bottom: 8px;

        padding: 8px;

        background: #363b3e;

        border-radius: 4px;

        font-weight: bold;

    }

    .panel-title {

        line-height: 1.2em;

        margin-bottom: 12px;

    }

    .reminder-item {

        padding: 12px 12px 0;

        margin-bottom: 12px;

        border-radius: 8px;

        position: relative;

        transition: all 0.3s;

        flex-direction: column;

        align-items: stretch;

        overflow: hidden;

        display: flex;

        border: 1px solid #555;

        transform: translate(0, 0);

        z-index: 1;

    }

    .reminder-item:hover {

        background:#2a3135;

        border-color:#2a3135;

    }

    .reminder-item.visited {

        opacity: 0.6;

    }

    

    .reminder-item-content {

        display: flex;

        align-items: center;

        margin-bottom: 12px;

        gap: 4px;

    }

    .reminder-item-name {

        flex: 1;

        min-width: 0;

        overflow: hidden;

        text-overflow: ellipsis;

        cursor: pointer;

        line-height: 1.2em;

    }

    .reminder-actions {

        display: flex;

        background: #333638;

        height: 0;

        overflow: hidden;

        transition: height 0.3s ease-in-out;

        margin: 0 -12px;

        width: calc(100% + 24px);

    }

    .reminder-item:hover .reminder-actions {

        height: 35px;

    }

    .reminder-actions button {

        flex: 1;

        height: 35px;

        border: none;

        background: #2a3135;

        color: #d9dbdb;

        cursor: pointer;

        transition: background-color 0.2s ease;

        font-size: 14px;

        padding: 0;

        margin: 0;

        min-width: 0;

        border-radius: 0;

    }

    .reminder-actions button:hover {

        background: #33373A;

    }

     .clear-all-container {

        padding: 12px;

        background: #353c3f;

        border-top: 1px solid #444;

        flex-shrink: 0;

    }

    /* Workflowy官网弹出快捷键面板样式 */

    .right-bar div:nth - child(1) {

        width: 300px;

    }

    .clear-all-btn {

        width: 100%;

        height: 32px;

        background: #42484b;

        color: #e8e8e8;

        border: none;

        border-radius: 22px;

        cursor: pointer;

        font-size: 14px;

        transition: all 0.3s;

    }

    .clear-all-btn:hover {

        background: #d9534f;

    }

        .reminder-list {

            margin-bottom: 60px;

        }

    .no-reminders {

        text-align: center;

        color: #a8a8a8;

        font-size: 14px;

        padding: 20px;

        line-height: 1.6;

    }

    .panel-content {

        padding-bottom: 80px;

    }

    .version-tag {

        font-size: 12px;

        color: #8b9398;

        font-weight: normal;

        margin-left: 8px;

        padding: 2px 6px;

        background: #2a3135;

        border-radius: 10px;

        display: inline-block;

        vertical-align: middle;

        line-height: 1.5;

    }

    .has-mirrors {

        position: relative;

    }

    .has-mirrors::before {

        content: '';

        position: absolute;

        left: 0;

        top: 0;

        bottom: 0;

        width: 3px;

        background: #4a9eff;

        border-radius: 3px 0 0 3px;

        opacity: 0.6;

    }

     .reminder-action-btn {

        background: transparent;

        border: none;

        color: #d9dbdb;

        cursor: pointer;

        padding: 4px 8px;

        font-size: 12px;

        border-radius: 4px;

        transition: all 0.2s ease;

    }

    .reminder-action-btn:hover {

        background: #33373A;

    }

    .reminder-action-btn.complete {

        color: #28a745;

    }

    .reminder-action-btn.delete {

        color: #dc3545;

    }

    .reminder-item.completed {

        opacity: 0.6;

    }

    .reminder-item.completed .reminder-item-name {

        text-decoration: line-through;

    }

    `);

    const SCRIPT_VERSION = GM_info.script.version;

    const TARGET_NODE_ID = '8220a888febe'; // DailyPlanner目标节点ID

    let reminders = JSON.parse(localStorage.getItem('workflowy_reminders') || '{}');

    let currentMode = 'scan';

    let visitedItems = JSON.parse(localStorage.getItem('workflowy_visited_items') || '[]');

    function normalizeReminderText(text) {

        return text.trim().replace(/\s+/g, ' ');

    }

    

    function extractTimeInfo(text) {

        const timeMatch = text.match(/@(\d{1,2}:\d{2})/);

        return timeMatch ? timeMatch[1] : null;

    }

    

    function extractReminderContent(text) {

        return normalizeReminderText(text

            .replace(/@\d{1,2}:\d{2}/, '')

            .replace(/#remind/, '')

            .replace(/#提醒/, '')

            .replace(/#稍后处理/, '')

            .replace(/#01每日推进/, '')

            .trim());

    }

    

    function isDuplicateReminder(newReminder, existingReminders) {

        const newContent = extractReminderContent(newReminder.name);

        const newTime = extractTimeInfo(newReminder.name);

        return Object.values(existingReminders).some(reminder => {

            const existingContent = extractReminderContent(reminder.name);

            const existingTime = extractTimeInfo(reminder.name);

            return newContent === existingContent && newTime === existingTime;

        });

    }

    

    function waitForWF() {

        if(typeof WF !== 'undefined') {

            console.log('WorkFlowy API 加载完成');

            initReminder();

        } else {

            console.log('等待 WorkFlowy API...');

            setTimeout(waitForWF, 100);

        }

    }

    function initReminder() {

        // 创建提醒面板

        const panel = document.createElement('div');

        panel.className = 'reminder-panel';

        panel.innerHTML = `

            <div class="panel-header">

                <h1>

                    Workflowy Forwarder

                    <span class="version-tag">v${SCRIPT_VERSION}</span>

                </h1>

                <div class="mode-switch">

                    <button class="mode-btn active" id="scan-reminders">DailyPlanner</button>

                    <button class="mode-btn" id="follow-reminders">Target</button>

                    <button class="mode-btn" id="collect-reminders">Collector</button>

                </div>

                <a href="https://workflowy.com/#/${TARGET_NODE_ID}" class="planner-link">

                    🔗 进入计划

                </a>

            </div>

            <div class="panel-content">

                <div class="reminder-list" id="reminder-list"></div>

            </div>

            <div class="clear-all-container">

                <button class="clear-all-btn" id="clear-all">清除所有笔记</button>

            </div>

        `;

    

        document.body.appendChild(panel);

        // 添加键盘事件监听

        document.addEventListener('keydown', handleKeyPress);

        // 初始化其他事件监听

        document.getElementById('scan-reminders').onclick = () => {

            currentMode = 'scan';

            scanReminders();

            updateButtonStyles();

        };

        // 添加折叠按钮

        const toggleBtn = document.createElement('button');

        toggleBtn.className = 'reminder-toggle';

        toggleBtn.innerHTML = `

            <svg aria-hidden="true" focusable="false" class="toggle-arrow" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">

                <path fill="currentColor" d="M4.7 244.7c-6.2 6.2-6.2 16.4 0 22.6l176 176c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L54.6 272 432 272c8.8 0 16-7.2 16-16s-7.2-16-16-16L54.6 240 203.3 91.3c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0l-176 176z"></path>

            </svg>

        `;

        document.body.appendChild(toggleBtn);

    

        // 处理内容区域的padding

        function updateContentPadding() {

            const content = document.getElementById('content');

            if (!content) return;

            

            if (panel.classList.contains('visible')) {

                content.style.paddingRight = '336px';

            } else {

                content.style.paddingRight = '0';

            }

        }

    

        // 添加事件监听

        toggleBtn.onclick = () => {

            panel.classList.toggle('visible');

            toggleBtn.classList.toggle('active');

            updateContentPadding();

        };

        document.getElementById('scan-reminders').onclick = () => {

            currentMode = 'scan';

            scanReminders();

            updateButtonStyles();

        };

        document.getElementById('follow-reminders').onclick = () => {

            currentMode = 'follow';

            followReminders();

            updateButtonStyles();

        };

        document.getElementById('collect-reminders').onclick = () => {

            currentMode = 'collect';

            collectReminders();

            updateButtonStyles();

        };

        document.getElementById('clear-all').onclick = clearAllReminders;

        updateButtonStyles();

        scanReminders();

        updateContentPadding();

        // 设置定时刷新

        setInterval(() => {

            if (currentMode === 'scan') {

                scanReminders();

            }

        }, 60000);

        

    }

    // 处理键盘事件

    function handleKeyPress(event) {

        // Alt + F

        if (event.altKey && event.code === 'KeyF') {

            event.preventDefault();

            togglePanel();

            showShortcutToast();

        }

    }

    // 显示快捷键提示

    function showShortcutToast() {

        // 检查是否已存在提示元素

        let toast = document.getElementById('shortcut-toast');

        if (!toast) {

            toast = document.createElement('div');

            toast.id = 'shortcut-toast';

            document.body.appendChild(toast);

        }

        // 更新提示内容

        toast.textContent = '面板已切换 (Alt + F)';

        toast.classList.add('show');

        // 2秒后隐藏提示

        setTimeout(() => {

            toast.classList.remove('show');

        }, 2000);

    }

    

    function updateLastRefreshTime() {

        const now = new Date();

        const timeStr = now.toLocaleTimeString();

        const refreshBtn = document.getElementById('refresh-btn');

        if (refreshBtn) {

            refreshBtn.title = `最后刷新: ${timeStr}`;

        }

    }

    

    function updateButtonStyles() {

        const scanBtn = document.getElementById('scan-reminders');

        const followBtn = document.getElementById('follow-reminders');

        const collectBtn = document.getElementById('collect-reminders');

    

        scanBtn.classList.toggle('active', currentMode === 'scan');

        followBtn.classList.toggle('active', currentMode === 'follow');

        collectBtn.classList.toggle('active', currentMode === 'collect');

    

        // 更新链接的显示

        const plannerLink = document.querySelector('.planner-link');

        if (plannerLink) {

            plannerLink.style.display = currentMode === 'scan' ? 'block' : 'none';

        }

    }

    

    function togglePanel() {

        const panel = document.querySelector('.reminder-panel');

        const toggleBtn = document.querySelector('.reminder-toggle');

        const content = document.getElementById('content');

        

        if (panel && toggleBtn) {

            panel.classList.toggle('visible');

            toggleBtn.classList.toggle('active');

            

            if (content) {

                content.style.paddingRight = panel.classList.contains('visible') ? '319px' : '0';

            }

        }

    }

    function scanReminders() {

        const targetNode = WF.getItemById(TARGET_NODE_ID);

        if (!targetNode) {

            console.log('未找到指定节点');

            return;

        }

        const newReminders = {};

        const firstLevelNodes = targetNode.getChildren();

        firstLevelNodes.forEach(node => {

            const name = node.getNameInPlainText();

            const id = node.getId();

            if (name.toLowerCase().includes('references')) {

                return;

            }

            const timeMatch = name.match(/^(\d{2})/);

            if (timeMatch) {

                const number = parseInt(timeMatch[1]);

                if (number >= 5 && number <= 22) {

                    const children = node.getChildren();

                    children.forEach(child => {

                        const childName = child.getNameInPlainText();

                        if (childName.trim() && !childName.toLowerCase().includes('references')) {

                            const reminderTime = new Date();

                            reminderTime.setHours(number, 0, 0, 0);

                            

                            // 获取节点完成状态

                            const completed = WF.getItemById(child.getId())?.isCompleted() || false;

                            const newReminder = {

                                id: child.getId(),

                                name: childName,

                                parentName: name,

                                parentId: id,

                                time: reminderTime.getTime(),

                                notified: false,

                                mode: 'scan',

                                url: `https://workflowy.com/#/${child.getId()}`,

                                completed: completed  // 使用实际的完成状态

                            };

                            newReminders[child.getId()] = newReminder;

                        }

                    });

                }

            }

        });

        // 合并提醒时保留非scan模式的提醒

        reminders = Object.fromEntries(

            Object.entries(reminders)

                .filter(([_, r]) => r.mode !== 'scan')

                .concat(Object.entries(newReminders))

        );

        saveReminders();

        updateReminderList();

    }

    

    function followReminders() {

        const newReminders = {};

        const targetNodeIds = ['6280897d3c65', '3b7e610683fe'];

        const tempReminders = new Map();

        for (const targetNodeId of targetNodeIds) {

            const targetNode = WF.getItemById(targetNodeId);

            if (!targetNode) {

                console.log(`未找到目标节点: ${targetNodeId}`);

                continue;

            }

            function processItem(item) {

                const name = item.getNameInPlainText();

                const note = item.getNoteInPlainText();

                const id = item.getId();

                const element = item.getElement();

                const hasMirrors = element && element.closest('.project').classList.contains('hasMirrors');

                if (!name.includes('#index') && !note.includes('#index') && id !== targetNodeId) {

                    if (name.includes('#01每日推进') || note.includes('#01每日推进')) {

                        const reminderText = note.includes('#01每日推进') ? note : name;

                        const normalizedContent = extractReminderContent(reminderText);

                        

                        // 获取实际的完成状态

                        const wfItem = WF.getItemById(id);

                        const completed = wfItem ? wfItem.isCompleted() : false;

                        const newReminder = {

                            id: id,

                            name: reminderText,

                            originalName: name,

                            hasNoteTag: note.includes('#01每日推进'),

                            time: new Date().getTime(),

                            notified: false,

                            mode: 'follow',

                            url: `https://workflowy.com/#/${id}`,

                            hasMirrors: hasMirrors,

                            completed: completed  // 使用实际的完成状态

                        };

                        if (note.includes('#01每日推进')) {

                            newReminder.displayName = `${name} `;

                        } else {

                            newReminder.displayName = name;

                        }

                        const existingReminder = tempReminders.get(normalizedContent);

                        if (!existingReminder || (hasMirrors && !existingReminder.hasMirrors)) {

                            tempReminders.set(normalizedContent, newReminder);

                        }

                    }

                }

                item.getChildren().forEach(child => processItem(child));

            }

            processItem(targetNode);

        }

        // 将筛选后的提醒加入到newReminders对象

        for (const reminder of tempReminders.values()) {

            newReminders[reminder.id] = reminder;

        }

        // 更新全局提醒对象

        reminders = Object.fromEntries(

            Object.entries(reminders)

                .filter(([_, r]) => r.mode !== 'follow')

                .concat(Object.entries(newReminders))

        );

        saveReminders();

        updateReminderList();

    }

    

    function collectReminders() {

        const newReminders = {};

        const inboxId = '17cfc44d9b20';

        const inboxItem = WF.getItemById(inboxId);

        if (!inboxItem) {

            alert('未找到收件箱节点！');

            return;

        }

        // 从已有的提醒中读取创建时间

        const existingReminders = Object.fromEntries(

            Object.entries(reminders)

                .filter(([_, r]) => r.mode === 'collect')

        );

        // 直接获取第一级子节点

        const firstLevelNodes = inboxItem.getChildren();

        firstLevelNodes.forEach(item => {

            const name = item.getNameInPlainText();

            const id = item.getId();

            if (!name.includes('#index') && id !== inboxId) {

                if (name.includes('#稍后处理')) {

                    // 获取实际的完成状态

                    const wfItem = WF.getItemById(id);

                    const completed = wfItem ? wfItem.isCompleted() : false;

                    

                    // 如果是已存在的提醒，保留原有的创建时间

                    const existingReminder = existingReminders[id];

                    const creationTime = existingReminder ? existingReminder.creationTime : Date.now();

                    const newReminder = {

                        id: id,

                        name: name,

                        time: item.getLastModifiedDate().getTime(),

                        creationTime: creationTime,

                        notified: false,

                        mode: 'collect',

                        url: `https://workflowy.com/#/${id}`,

                        hasChildren: item.getChildren().length > 0,

                        completed: completed  // 使用实际的完成状态

                    };

                    newReminders[id] = newReminder;

                }

            }

        });

        // 更新提醒列表

        reminders = Object.fromEntries(

            Object.entries(reminders)

                .filter(([_, r]) => r.mode !== 'collect')

                .concat(Object.entries(newReminders))

        );

        saveReminders();

        updateReminderList();

    }

    

    function createReminderItem(reminder) {

        const isCompleted = reminder.completed || false;

        const isVisited = currentMode === 'collect' && visitedItems.includes(reminder.id);

        let displayText = reminder.name;

        if (reminder.mode === 'follow' && reminder.displayName) {

            displayText = reminder.displayName;

        }

    

        return `

        <div class="reminder-item ${isVisited ? 'visited' : ''} ${reminder.hasMirrors ? 'has-mirrors' : ''} ${isCompleted ? 'completed' : ''}"

             data-id="${reminder.id}"

             data-mode="${reminder.mode}">

            <div class="reminder-item-content">

                <span class="reminder-item-name" onclick="WF.getItemById('${reminder.id}') && WF.zoomTo(WF.getItemById('${reminder.id}'))">${displayText}</span>

            </div>

            <div class="reminder-actions">

                <button class="reminder-action-btn complete" data-id="${reminder.id}">

                    ${isCompleted ? '取消完成' : '完成'}

                </button>

                <button class="copy-btn" data-content="${reminder.url}">复制链接</button>

                <button class="reminder-action-btn delete" data-id="${reminder.id}">删除</button>

            </div>

        </div>`;

    }

    

    function updateReminderList() {

        const listElement = document.getElementById('reminder-list');

        if (!listElement) return;

    

        const currentReminders = Object.values(reminders).filter(r => r.mode === currentMode);

    

        if (currentMode === 'scan') {

            const remindersByParent = {};

    

            currentReminders.forEach(reminder => {

                const parentId = reminder.parentId;

                if (!remindersByParent[parentId]) {

                    remindersByParent[parentId] = {

                        name: reminder.parentName,

                        time: reminder.time,

                        items: []

                    };

                }

                remindersByParent[parentId].items.push(reminder);

            });

    

            const blocks = Object.entries(remindersByParent)

                .sort(([_, a], [__, b]) => a.time - b.time)

                .map(([parentId, block]) => {

                    const items = block.items

                        .map(reminder => createReminderItem(reminder))

                        .join('');

    

                    return `

                        <div class="reminder-block">

                            <div class="reminder-block-title">${block.name}</div>

                            ${items}

                        </div>

                    `;

                }).join('');

    

            listElement.innerHTML = blocks || '<div class="no-reminders">暂无时间块内容<br>时间格式：05-22</div>';

        } else {

            let items = currentReminders;

            

            if (currentMode === 'collect') {

                // 使用创建时间进行排序

                items = items.sort((a, b) => {

                    return b.creationTime - a.creationTime; // 从新到旧排序

                });

            } else {

                items = items.sort((a, b) => 

                    extractReminderContent(a.name).localeCompare(extractReminderContent(b.name))

                );

            }

    

            listElement.innerHTML = items

                .map(reminder => createReminderItem(reminder))

                .join('') || 

                `<div class="no-reminders">暂无${

                    currentMode === 'follow' ? 

                    '跟进事项<br>使用格式：任务内容 #01每日推进' : 

                    '待整理事项<br>使用格式：任务内容 #稍后处理'

                }</div>`;

        }

    

        addEventListeners(listElement);

    }

    // 修改事件监听器

    function addEventListeners(listElement) {

        // 点击节点名称

        listElement.querySelectorAll('.reminder-item').forEach(item => {

            const nameEl = item.querySelector('.reminder-item-name');

            const id = item.dataset.id;

    

            nameEl.addEventListener('click', () => {

                if (currentMode === 'collect' && !visitedItems.includes(id)) {

                    visitedItems.push(id);

                    localStorage.setItem('workflowy_visited_items', JSON.stringify(visitedItems));

                    item.classList.add('visited');

                }

                const wfItem = WF.getItemById(id);

                if (wfItem) WF.zoomTo(wfItem);

            });

        });

    

        // 完成按钮事件

        listElement.querySelectorAll('.reminder-action-btn.complete').forEach(btn => {

            btn.addEventListener('click', function() {

                const id = this.dataset.id;

                const item = WF.getItemById(id);

                if (item) {

                    WF.completeItem(item);

                    const reminder = reminders[id];

                    if (reminder) {

                        reminder.completed = !reminder.completed;

                        saveReminders();

                        updateReminderList();

                    }

                }

            });

        });

    

        // 复制链接按钮事件

        listElement.querySelectorAll('.copy-btn').forEach(btn => {

            btn.addEventListener('click', function() {

                navigator.clipboard.writeText(this.dataset.content).then(() => {

                    this.textContent = '已复制';

                    setTimeout(() => this.textContent = '复制链接', 1000);

                });

            });

        });

    

        // 删除按钮事件

        listElement.querySelectorAll('.reminder-action-btn.delete').forEach(btn => {

            btn.addEventListener('click', async function() {

                const id = this.dataset.id;

                if (confirm('确定要删除这个任务吗？此操作不可撤销。')) {

                    const item = WF.getItemById(id);

                    if (item) {

                        WF.editGroup(() => {

                            const currentItem = WF.currentItem();

                            const parent = item.getParent();

                            

                            WF.deleteItem(item);

                            

                            if (currentItem && (currentItem.getId() === id || isDescendant(currentItem, item))) {

                                setTimeout(() => {

                                    if (parent) {

                                        WF.zoomTo(parent);

                                    } else {

                                        WF.zoomTo(WF.rootItem());

                                    }

                                }, 100);

                            }

                            

                            delete reminders[id];

                            saveReminders();

                            updateReminderList();

                        });

                    }

                }

            });

        });

    }

    function isDescendant(possibleDescendant, ancestor) {

        let current = possibleDescendant;

        while (current) {

            if (current.getId() === ancestor.getId()) {

                return true;

            }

            current = current.getParent();

        }

        return false;

    }

    

    function deleteReminder(id) {

        // 从本地存储中删除提醒

        delete reminders[id];

        saveReminders();

        

        // 更新界面显示

        updateReminderList();

    }

    

    function clearAllReminders() {

        reminders = Object.fromEntries(

            Object.entries(reminders).filter(([_, r]) => r.mode !== currentMode)

        );

        saveReminders();

        updateReminderList();

    }

    function saveReminders() {

        localStorage.setItem('workflowy_reminders', JSON.stringify(reminders));

    }

    

    console.log('WorkFlowy DAILY PLANNER 助手启动...');

    waitForWF();

    

    })();

