// ==UserScript==
// @name         WorkFlowy Node Collector with Color (Enhanced)
// @namespace    http://tampermonkey.net/
// @version      0.2
// @description  Collect nodes and display them as colored cards with proper color support
// @author       You
// @match        https://workflowy.com/*
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    const TARGET_NODE_ID = 'dfd2b14ce43b';

    GM_addStyle(`
        .collector-panel {
            position: fixed;
            right: 20px;
            top: 60px;
            background: #2B3135;
            padding: 15px;
            border-radius: 8px;
            color: white;
            z-index: 9999;
            width: 350px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.3);
            max-height: 80vh;
            display: flex;
            flex-direction: column;
        }

        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            flex-shrink: 0;
            padding-bottom: 10px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .panel-title {
            margin: 0;
            font-size: 16px;
            font-weight: 500;
        }

        .close-button {
            background: none;
            border: none;
            color: #ffffff80;
            cursor: pointer;
            font-size: 20px;
            padding: 0;
            line-height: 1;
            transition: color 0.2s ease;
        }

        .close-button:hover {
            color: #fff;
        }

        .cards-container {
            overflow-y: auto;
            flex-grow: 1;
            padding-right: 5px;
        }

        .node-card {
            padding: 12px;
            margin-bottom: 8px;
            border-radius: 6px;
            background: rgba(53, 60, 63, 1);
            border: 1px solid rgba(58, 67, 71, 1);
            transition: all 0.3s ease;
            font-size: 14px;
            cursor: pointer;
            line-height: 1.4;
            position: relative;
        }

        .node-card.colored {
            background: var(--node-color, rgba(53, 60, 63, 1));
            border: 1px solid var(--node-border-color, rgba(58, 67, 71, 1));
            color: var(--text-color, inherit);
        }

        .node-card.highlighted {
            background: var(--highlight-color, rgba(53, 60, 63, 1));
            border: 1px solid var(--highlight-border-color, rgba(58, 67, 71, 1));
        }

        .node-card:hover {
            transform: translateX(-3px);
            opacity: 0.9;
            box-shadow: 2px 2px 6px rgba(0,0,0,0.2);
        }

        .refresh-button {
            background: #4a9eff;
            border: none;
            padding: 8px 16px;
            color: white;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
            width: 100%;
            transition: background-color 0.2s ease;
            font-size: 14px;
        }

        .refresh-button:hover {
            background: #357DA6;
        }

        .shortcut-info {
            font-size: 11px;
            color: #ffffff80;
            margin-top: 10px;
            text-align: center;
        }

        .cards-container::-webkit-scrollbar {
            width: 6px;
        }

        .cards-container::-webkit-scrollbar-track {
            background: #1a1d20;
            border-radius: 3px;
        }

        .cards-container::-webkit-scrollbar-thumb {
            background: #4a4d50;
            border-radius: 3px;
        }

        .cards-container::-webkit-scrollbar-thumb:hover {
            background: #5a5d60;
        }

        .empty-message {
            color: #ffffff80;
            text-align: center;
            padding: 20px;
            font-style: italic;
        }
    `);

    function getNodeColorInfo(node) {
        const element = node.getElement();
        if (!element) return null;

        const content = element.querySelector('.content');
        if (!content) return null;

        // 检查两种颜色标记
        const coloredElement = content.querySelector('.colored');
        const highlightElement = content.querySelector('.webhighlights-highlight');

        if (coloredElement) {
            // 获取具体的颜色类名（例如：c-green, c-red 等）
            const colorClass = Array.from(coloredElement.classList)
                .find(cls => cls.startsWith('c-'));
            
            // 获取计算后的样式
            const computedStyle = window.getComputedStyle(coloredElement);
            const textColor = computedStyle.color;

            return {
                type: 'colored',
                colorClass,
                color: textColor
            };
        }

        if (highlightElement) {
            const style = highlightElement.getAttribute('style') || '';
            const backgroundColor = style.match(/background-color:\s*([^;]+)/)?.[1];

            return {
                type: 'highlight',
                backgroundColor
            };
        }

        return null;
    }

    function createNodeCard(node) {
        const colorInfo = getNodeColorInfo(node);
        let colorStyle = '';
        let colorClass = '';

        if (colorInfo) {
            if (colorInfo.type === 'colored') {
                colorClass = 'colored';
                // 使用颜色映射表将文本颜色转换为背景色
                const colorMap = {
                    'c-red': '#ffebee',
                    'c-orange': '#fff3e0',
                    'c-yellow': '#fffde7',
                    'c-green': '#e8f5e9',
                    'c-blue': '#e3f2fd',
                    'c-purple': '#f3e5f5',
                };
                
                const backgroundColor = colorMap[colorInfo.colorClass] || 
                                      colorInfo.color.replace('rgb', 'rgba').replace(')', ', 0.1)');
                colorStyle = `
                    --node-color: ${backgroundColor}; 
                    --node-border-color: ${colorInfo.color.replace('rgb', 'rgba').replace(')', ', 0.3)')};
                    --text-color: ${colorInfo.color};
                `;
            } else if (colorInfo.type === 'highlight') {
                colorClass = 'highlighted';
                const backgroundColor = colorInfo.backgroundColor;
                colorStyle = `
                    --highlight-color: ${backgroundColor}; 
                    --highlight-border-color: ${backgroundColor.replace('rgb', 'rgba').replace(')', ', 0.5)')};
                `;
            }
        }

        const div = document.createElement('div');
        div.className = `node-card ${colorClass}`;
        if (colorStyle) {
            div.style.cssText = colorStyle;
        }
        div.textContent = node.getNameInPlainText();
        div.setAttribute('data-id', node.getId());
        
        div.addEventListener('click', () => {
            WF.zoomTo(node);
        });

        return div;
    }

    function collectNodes() {
        const targetNode = WF.getItemById(TARGET_NODE_ID);
        if (!targetNode) {
            console.log('未找到目标节点');
            return [];
        }

        return targetNode.getChildren();
    }

    function updatePanel() {
        const container = document.querySelector('.cards-container');
        if (!container) return;

        container.innerHTML = '';
        const nodes = collectNodes();
        
        if (nodes.length === 0) {
            container.innerHTML = '<div class="empty-message">没有找到节点</div>';
            return;
        }

        nodes.forEach(node => {
            container.appendChild(createNodeCard(node));
        });
    }

    function togglePanel() {
        const panel = document.querySelector('.collector-panel');
        if (panel) {
            panel.remove();
        } else {
            initPanel();
        }
    }

    function initPanel() {
        const panel = document.createElement('div');
        panel.className = 'collector-panel';
        panel.innerHTML = `
            <div class="panel-header">
                <h3 class="panel-title">节点收集器</h3>
                <button class="close-button" id="close-panel">&times;</button>
            </div>
            <div class="cards-container"></div>
            <button class="refresh-button" id="refresh-nodes">刷新节点</button>
            <div class="shortcut-info">快捷键: Alt + C 切换面板</div>
        `;
        document.body.appendChild(panel);
        
        document.getElementById('refresh-nodes').addEventListener('click', updatePanel);
        document.getElementById('close-panel').addEventListener('click', togglePanel);
        
        updatePanel();
    }

    function waitForWF() {
        if(typeof WF !== 'undefined') {
            console.log('WorkFlowy API 加载完成');
            document.addEventListener('keydown', function(e) {
                if (e.altKey && e.key === 'c') {
                    togglePanel();
                }
            });
            initPanel();
        } else {
            console.log('等待 WorkFlowy API...');
            setTimeout(waitForWF, 100);
        }
    }

    console.log('WorkFlowy 节点收集器启动...');
    waitForWF();
})();